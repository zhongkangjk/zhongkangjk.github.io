{"meta":{"title":"懒派日志","subtitle":"","description":"懒派大弟子的懒派日志","author":"懒派大弟子","url":"https://zhongkangjk.github.io","root":"/"},"pages":[{"title":"","date":"2021-07-24T15:25:53.999Z","updated":"2021-07-24T15:25:53.999Z","comments":true,"path":"about/index.html","permalink":"https://zhongkangjk.github.io/about/index.html","excerpt":"","text":"这个人很懒，什么也没写"},{"title":"","date":"2021-07-24T15:24:36.199Z","updated":"2021-07-24T15:24:36.199Z","comments":false,"path":"artitalk/index.html","permalink":"https://zhongkangjk.github.io/artitalk/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-07-24T15:24:59.788Z","updated":"2021-07-24T15:24:59.788Z","comments":true,"path":"tags/index.html","permalink":"https://zhongkangjk.github.io/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2021-07-24T15:25:01.408Z","updated":"2021-07-24T15:25:01.408Z","comments":true,"path":"categories/index.html","permalink":"https://zhongkangjk.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"django-admin返回一个excel文件的按钮函数记录","slug":"django-admin返回一个excel文件的按钮函数记录","date":"2022-04-23T11:19:30.000Z","updated":"2022-04-23T11:24:50.665Z","comments":true,"path":"2022/04/23/django-admin返回一个excel文件的按钮函数记录/","link":"","permalink":"https://zhongkangjk.github.io/2022/04/23/django-admin%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AAexcel%E6%96%87%E4%BB%B6%E7%9A%84%E6%8C%89%E9%92%AE%E5%87%BD%E6%95%B0%E8%AE%B0%E5%BD%95/","excerpt":"需要返回一个excel文件","text":"需要返回一个excel文件 函数本体1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253def 统计到excel(self, request, queryset): ### 统计数量和 def 返回姓名的合计(姓名): 字典 = queryset.filter(姓名=姓名).aggregate(Sum(&#x27;******&#x27;),Sum(&#x27;****&#x27;)) return list(字典.values()) 姓名集合 = set(queryset.all().values_list(&#x27;姓名&#x27;,flat=True)) #主题去重 数据列表 = [[姓名,*返回姓名的合计(姓名)] for 姓名 in 姓名集合] #制造数据列表 rd_book = xlrd.open_workbook(&#x27;******&#x27;,formatting_info=True) wb = copy(rd_book) #复制一下表 wb_sheet = wb.get_sheet(0) # 设置单元格格式边框 borders = xlwt.Borders() borders.left = 1 borders.right = 1 borders.top = 1 borders.bottom = 1 style = xlwt.XFStyle() style.borders = borders # 设置单元格背景色为黄色 style1 = xlwt.XFStyle() pattern = xlwt.Pattern() pattern.pattern = xlwt.Pattern.SOLID_PATTERN pattern.pattern_fore_colour = 5 #5是黄色 style1.pattern = pattern style1.borders = borders # 设置单元格字体 font = xlwt.Font() font.name = &#x27;微软雅黑&#x27; font.bold = True style.font = font ## 一行一行往上套公式啊 for i in range(len(数据列表)): for j in range(len(数据列表[i])): wb_sheet.write(i+3,j,数据列表[i][j],style) 当前行 = str(i+4) wb_sheet.write(i+3,len(数据列表[i]),xlwt.Formula(&#x27;B3*B&#x27;+当前行+&#x27;+C3*C&#x27;+当前行+&#x27;+D3*D&#x27;+当前行+&#x27;+E3*E&#x27;+当前行+&#x27;+F3*F&#x27;+当前行+&#x27;+G3*G&#x27;+当前行+&#x27;+H3*H&#x27;+当前行+&#x27;+I3*I&#x27;+当前行+&#x27;+J3*J&#x27;+当前行+&#x27;+K3*K&#x27;+当前行+&#x27;+L3*L&#x27;+当前行+&#x27;+M3*M&#x27;+当前行+&#x27;+N3*N&#x27;+当前行+&#x27;+O3*O&#x27;+当前行+&#x27;+P3*P&#x27;+当前行),style1) wb_sheet.write(len(数据列表)+3,0,&#x27;数量合计&#x27;,style) for i in range(len(数据列表[0])-1): wb_sheet.write(len(数据列表)+3,i+1,xlwt.Formula(&#x27;SUM(&#x27;+chr(66+i)+&#x27;4:&#x27;+chr(66+i)+str(len(数据列表)+3)+&#x27;)&#x27;),style1) wb_sheet.write(len(数据列表)+4,0,&#x27;金额合计&#x27;,style1) for i in range(len(数据列表[0])-1): wb_sheet.write(len(数据列表)+4,i+1,xlwt.Formula(chr(66+i)+&#x27;3*&#x27;+chr(66+i)+str(len(数据列表)+4)),style1) wb_sheet.write(len(数据列表)+3,len(数据列表[0]),&#x27;&#x27;,style1) wb_sheet.write(len(数据列表)+4,len(数据列表[0]),xlwt.Formula(&#x27;SUM(B&#x27;+str(len(数据列表)+4+1)+&#x27;:P&#x27;+str(len(数据列表)+4+1)+&#x27;)&#x27;),style1) filename = &#x27;提成汇总表&#x27; #中文不行 我也不知道为什么 response = HttpResponse(content_type=&#x27;application/vnd.ms-excel&#x27;) response[&#x27;Content-Disposition&#x27;] = &#x27;attachment;filename=%s.xls&#x27; % filename wb.save(response) return response","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"}]},{"title":"DJango admin 增加自定义筛选器","slug":"DJango-admin-增加自定义筛选器","date":"2022-04-20T01:09:17.000Z","updated":"2022-04-20T01:13:28.855Z","comments":true,"path":"2022/04/20/DJango-admin-增加自定义筛选器/","link":"","permalink":"https://zhongkangjk.github.io/2022/04/20/DJango-admin-%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AD%9B%E9%80%89%E5%99%A8/","excerpt":"增加自定义的筛选器","text":"增加自定义的筛选器 app/admin.py 增加一个只选取月份的筛选器1234567891011121314151617181920212223242526272829303132333435363738from django.contrib import adminclass UpdatedAtFilter(admin.SimpleListFilter): title = &#x27;选择月份&#x27; parameter_name = &#x27;月份&#x27; # 菜单列表 def lookups(self, request, model_admin): &quot;&quot;&quot; List of values to allow admin to select &quot;&quot;&quot; months = ( (1, &#x27;一月&#x27;), (2, &#x27;二月&#x27;), (3, &#x27;三月&#x27;), (4, &#x27;四月&#x27;), (5, &#x27;五月&#x27;), (6, &#x27;六月&#x27;), (7, &#x27;七月&#x27;), (8, &#x27;八月&#x27;), (9, &#x27;九月&#x27;), (10, &#x27;十月&#x27;), (11, &#x27;十一月&#x27;), (12, &#x27;十二月&#x27;) ) return months def queryset(self, request, queryset): &quot;&quot;&quot; Return the filtered queryset &quot;&quot;&quot; if self.value(): # DateTime Field can use __month to get its month value return queryset.filter(到期日__month=self.value()) else: return queryset@admin.register(催费表22年类)class ********(******): list_filter = (&#x27;***&#x27;,&#x27;***&#x27;,&#x27;***&#x27;,UpdatedAtFilter,) #筛选器","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"}]},{"title":"中文化Django自带后台名字","slug":"中文化Django自带后台名字","date":"2022-04-15T01:36:48.000Z","updated":"2022-04-15T01:44:46.911Z","comments":true,"path":"2022/04/15/中文化Django自带后台名字/","link":"","permalink":"https://zhongkangjk.github.io/2022/04/15/%E4%B8%AD%E6%96%87%E5%8C%96Django%E8%87%AA%E5%B8%A6%E5%90%8E%E5%8F%B0%E5%90%8D%E5%AD%97/","excerpt":"自带后台各属性改中文","text":"自带后台各属性改中文 网站标题 头app/admin.py 123from django.contrib import adminadmin.site.site_header = &#x27;催费&#x27;admin.site.site_title = &#x27;催费&#x27; 大菜单app/__init__.py 123456789101112131415from os import pathfrom django.apps import AppConfig VERBOSE_APP_NAME = &#x27;大菜单名字&#x27; def get_current_app_name(file): return path.dirname(file).replace(&#x27;\\\\&#x27;, &#x27;/&#x27;).split(&#x27;/&#x27;)[-1] class AppVerboseNameConfig(AppConfig): name = get_current_app_name(__file__) verbose_name = VERBOSE_APP_NAME default_app_config = get_current_app_name(__file__) + &#x27;.__init__.AppVerboseNameConfig&#x27; 小菜单app/models.py 1234567from django.db import modelsclass model类(models.Model): pass class Meta: verbose_name = &#x27;小菜单名字&#x27; verbose_name_plural = &quot;&#x27;小菜单名字&quot; 字段名字app/models.py 1234from django.db import modelsclass model类(models.Model): age = models.CharField(&#x27;字段名字&#x27;,max_length=5,blank=True,null=True)","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"}]},{"title":"uniapp部署的网页端非主页刷新404问题的解决方案","slug":"uniapp部署的网页端非主页刷新404问题的解决方案","date":"2022-04-08T15:16:08.000Z","updated":"2022-04-08T15:19:57.953Z","comments":true,"path":"2022/04/08/uniapp部署的网页端非主页刷新404问题的解决方案/","link":"","permalink":"https://zhongkangjk.github.io/2022/04/08/uniapp%E9%83%A8%E7%BD%B2%E7%9A%84%E7%BD%91%E9%A1%B5%E7%AB%AF%E9%9D%9E%E4%B8%BB%E9%A1%B5%E5%88%B7%E6%96%B0404%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"在nginx增加一行","text":"在nginx增加一行 123location / &#123; try_files $uri $uri/ /index.html;&#125; 实测么的问题，但其实我不知道为啥，无它，百度尔","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"前端","slug":"计算机/前端","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"uniapp","slug":"uniapp","permalink":"https://zhongkangjk.github.io/tags/uniapp/"}]},{"title":"合成单张发票PDF到一个PDF方便打印","slug":"合成单张发票PDF到一个PDF方便打印","date":"2022-03-25T06:04:01.000Z","updated":"2022-03-25T06:12:38.029Z","comments":true,"path":"2022/03/25/合成单张发票PDF到一个PDF方便打印/","link":"","permalink":"https://zhongkangjk.github.io/2022/03/25/%E5%90%88%E6%88%90%E5%8D%95%E5%BC%A0%E5%8F%91%E7%A5%A8PDF%E5%88%B0%E4%B8%80%E4%B8%AAPDF%E6%96%B9%E4%BE%BF%E6%89%93%E5%8D%B0/","excerpt":"发票pdf都是占一张A4纸，给他合成到一起两张打一页","text":"发票pdf都是占一张A4纸，给他合成到一起两张打一页 转载自不知名123456789101112131415161718192021222324252627282930313233343536import osfrom PyPDF2 import PdfFileReaderfrom PyPDF2 import PdfFileWriterprint(&quot;将需要转换的文件夹拖入命令行 按回车（默认为此文件所在目录）&quot;)workpath = input()if workpath == &#x27;&#x27;: workpath = os.getcwd()output = os.path.join(workpath,&quot;合并后的.pdf&quot;)filelist = []files = os.listdir(workpath)for file in files: if file.split(&#x27;.&#x27;)[-1] in [&#x27;pdf&#x27;, &#x27;PDF&#x27;]: filelist.append(os.path.join(workpath, file))filenum = len(filelist)print(&quot;共找到%d个pdf文件&quot; %filenum) writer = PdfFileWriter() #实例化写类for i in range(filenum): pageobj = PdfFileReader(filelist[i]).getPage(0) if i%2 == 0: blankpage = writer.addBlankPage(610,810) blankpage.mergeTranslatedPage(pageobj,0,410) else: blankpage.mergeTranslatedPage(pageobj,0,0)# writer.removeLinks() # 移除交互链接,部分发票pdf文件在位移后会有图章重复的情况,需要移除.writer.write(open(output,&#x27;wb&#x27;)) # 写入新的文件,完成合并.print(&quot;转换成功 输出文件&quot;,output)#如果是在当前文件夹，最好把结果文件处理到别的地方#个别发票平台移除交互链接会把签章去掉","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"pdf","slug":"pdf","permalink":"https://zhongkangjk.github.io/tags/pdf/"}]},{"title":"django导入更新数据脚本","slug":"django导入更新数据脚本","date":"2022-03-23T06:35:07.000Z","updated":"2022-03-23T07:08:09.072Z","comments":true,"path":"2022/03/23/django导入更新数据脚本/","link":"","permalink":"https://zhongkangjk.github.io/2022/03/23/django%E5%AF%BC%E5%85%A5%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC/","excerpt":"把操作django数据库的导入更新操作汇总一下以备参考","text":"把操作django数据库的导入更新操作汇总一下以备参考 之前利用爬虫更新表内数据和用时间计算表数据的日更操作脚本import os,sys,djangoimport asyncio,datetime,calendarimport httpx,json,time,mathfrom dateutil.relativedelta import relativedeltafrom django.db.models import Qimport smtplibfrom email.mime.multipart import MIMEMultipartfrom email.mime.text import MIMETextfrom email.mime.application import MIMEApplicationproject_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.append(project_path)os.environ[&#x27;DJANGO_SETTINGS_MODULE&#x27;] = &#x27;shuai4.settings&#x27;django.setup()from cuifei.models import 催费表类,可收表19年,可收表20年from shuju.models import 数据通知表类def 取结果(r): if r[&#x27;obj&#x27;]: j = [] for i in r[&#x27;obj&#x27;]: j.append(i[&#x27;fwqx&#x27;]) return max(j),r[&#x27;obj&#x27;][0][&#x27;jbrdh&#x27;] else: return None,Noneheaders = &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;Authorization&#x27;: &#x27;bearer eyJhbGciOiJIUzI1NiJ9.eyJp***&#x27;,&#125;url_by_税号 = &#x27;http://***&#x27;查税号URL= &#x27;http://***&#x27;文本 = []# print(催费表类.objects.all()[:5])queryset = 催费表类.objects.all()def 更新到期日和时间(queryset): async def 爬(client,body): def 保存结果(结果,body): if 结果[0]: body.到期日 = 结果[0] # body.经办人电话 = 结果[1] body.save(update_fields=[&#x27;到期日&#x27;]) r = await client.post(url_by_税号,headers=headers, data=json.dumps(&#123;&#x27;khsbh&#x27;: body.税号,&#125;),timeout=None) 结果 = 取结果(r.json()) if 结果[0]: 保存结果(结果,body) else: 用名称查的data = json.dumps(&#123;&#x27;count&#x27;:100,&#x27;keyword&#x27;: body.公司名称,&#x27;page&#x27;:0&#125;) r = await client.post(查税号URL,headers=headers, data=用名称查的data,timeout=None) res_dict = r.json() if res_dict[&#x27;obj&#x27;]: 税号1 = res_dict[&#x27;obj&#x27;][-1][&#x27;khsbh&#x27;] r1 = await client.post(url_by_税号,headers=headers, data=json.dumps(&#123;&#x27;khsbh&#x27;: 税号1,&#125;),timeout=None) 结果1 = 取结果(r1.json()) 保存结果(结果1,body) else: return None,None async def 跑(): async with httpx.AsyncClient() as client: task_list = [] for i in queryset: req = 爬(client,i) task = asyncio.create_task(req) task_list.append(task) await asyncio.gather(*task_list) start = time.time() asyncio.run(跑()) end = time.time() print(end-start) print(&#x27;查日期完成于&#x27;+time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())) 文本.append(&#x27;查日期完成于&#x27;+time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())+&#x27;用时&#x27;+str(end-start)+&#x27;秒&#x27;)def 更新可收年份(queryset): for i in queryset: if i.到期日: if type(i.到期日) == type(&#x27;s&#x27;): 到期日 = datetime.datetime.strptime(i.到期日,&#x27;%Y-%m-%d&#x27;).date() else: 到期日 = i.到期日 # print(i.公司名称,i.税号) a = 可收表19年.objects.filter(公司名称__exact = i.公司名称).count() if a &gt; 0: i.可收19 = 1 else: i.可收19 = 0 b = 可收表20年.objects.filter(Q(公司名称__exact = i.公司名称)|Q(税号__exact = i.税号)).count() if b &gt; 0: i.可收20 = 1 else: i.可收20 = 0 # print(i.到期日) # print(datetime.date.today()) 年 = datetime.datetime.now().year 月 = datetime.datetime.now().month 下一个月 = (datetime.datetime.now()+relativedelta(months=1)).month # 日 = datetime.datetime.now().day 新日 = calendar.monthrange(年,下一个月)[1] # print(新日) # print(datetime.date(年,月,新日)==i.到期日) if datetime.date(年,下一个月,新日)==到期日: 差年= 1 else: 差年 = math.ceil((datetime.date(年,下一个月,新日)-到期日)/datetime.timedelta(days=365)) # print(差年) 到期日年份 = 到期日.year 可收字典 = &#123;2015:1,2016:1,2017:1,2018:1,2019:i.可收19,2020:i.可收20,2021:1&#125; # 年份 = sum(listn[:差年]) j = 0 for i1 in range(到期日年份,到期日年份+差年): # print(i1) j += 可收字典[i1] # print(j) i.几年 = j i.save(update_fields=[&#x27;可收19&#x27;,&#x27;可收20&#x27;,&#x27;几年&#x27;]) print(&#x27;查可收几年完成于&#x27;+time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())) # global d # d = (&#x27;\\n&#x27;+&#x27;查可收几年完成于&#x27;+time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())) 文本.append(&#x27;查可收几年完成于&#x27;+time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()))更新到期日和时间(queryset)更新可收年份(queryset)def 发送邮件(邮件标题,称呼,邮件文字,发件人邮箱,密码,收件人邮箱,附件路径列表,附件命名列表): msg = MIMEMultipart() msg[&quot;Subject&quot;] = 邮件标题 msg[&quot;From&quot;] = 发件人邮箱 msg[&quot;To&quot;] = 称呼 #这是文字部分 part = MIMEText(邮件文字) msg.attach(part) #这是附件部分 for 附件路径,附件命名 in zip(附件路径列表,附件命名列表): part = MIMEApplication(open(附件路径,&#x27;rb&#x27;).read()) part.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=附件命名) msg.attach(part) s = smtplib.SMTP(&quot;smtp.qq.com&quot;, timeout=60)#SMTP服务的网址 try: s.login(发件人邮箱, 密码) s.sendmail(发件人邮箱, 收件人邮箱, msg.as_string())#收件人邮箱可以是列表 s.close() print(&quot;发送成功&quot;) except: print(&quot;发送失败&quot;)def 拿昨天的老数据(区域): # 今天 = datetime.date.today() 昨天 = datetime.date.today() - datetime.timedelta(days=1) # print(昨天) # print(type(昨天)) a = 数据通知表类.objects.filter(Q(日期 = 昨天)&amp;Q(区域=区域)).values()[0] # for i in a: # print(i) return a崂山老数据字典 = 拿昨天的老数据(&#x27;崂山&#x27;)市南老数据字典 = 拿昨天的老数据(&#x27;市南&#x27;)def 获得今天的新数据并存数据库(区域): # 崂山 今天 = datetime.date.today() 能查到日期的户数 = 催费表类.objects.filter(Q(到期日__isnull=False)&amp;Q(区域=区域)).count() 查不到日期的户数 = 催费表类.objects.filter(Q(到期日__isnull=True)&amp;Q(区域=区域)).count() 年 = datetime.datetime.now().year 月 = datetime.datetime.now().month 日 = calendar.monthrange(年,月)[1] 下一个月 = (datetime.datetime.now()+relativedelta(months=1)).month 下一个月日 = calendar.monthrange(年,下一个月)[1] 到期日为当月的户数 = 催费表类.objects.filter(Q(到期日__range=(datetime.date(年, 月, 1),datetime.date(年, 月, 日)))&amp;Q(区域=区域)).count() 到期日为下月的户数 = 催费表类.objects.filter(Q(到期日__range=(datetime.date(年, 下一个月, 1),datetime.date(年, 下一个月,下一个月日)))&amp;Q(区域=区域)).count() 前一个月 = (datetime.datetime.now()-relativedelta(months=1)).month 新日 = calendar.monthrange(年,前一个月)[1] 今年已逾期的户数 = 催费表类.objects.filter(Q(到期日__range=(datetime.date(年, 1, 1),datetime.date(年, 前一个月, 新日)))&amp;Q(区域=区域)).count() 下两个月 = (datetime.datetime.now()+relativedelta(months=2)).month 今年还未到期的户数 = 催费表类.objects.filter(Q(到期日__range=(datetime.date(年,下两个月, 1),datetime.date(年, 12, 31)))&amp;Q(区域=区域)).count() 往年到期户 = 催费表类.objects.filter(Q(到期日__lt=datetime.date(年,1,1))&amp;Q(几年__gte=1)&amp;Q(区域=区域)).count() 更新数据 = &#123; &#x27;日期&#x27;:今天, &#x27;区域&#x27;:区域, &#x27;能查到日期的户数&#x27;:能查到日期的户数, &#x27;查不到日期的户数&#x27;:查不到日期的户数, &#x27;到期日为当月的户数&#x27;:到期日为当月的户数, &#x27;到期日为下月的户数&#x27;:到期日为下月的户数, &#x27;今年已逾期的户数&#x27;:今年已逾期的户数, &#x27;今年还未到期的户数&#x27;:今年还未到期的户数, &#x27;往年到期户&#x27;:往年到期户 &#125; #存数据 数据通知表类.objects.update_or_create(defaults=更新数据,日期=今天,区域=区域) a = 数据通知表类.objects.filter(Q(日期 = 今天)&amp;Q(区域=区域)).values()[0] # print(a) return a崂山新数据字典 = 获得今天的新数据并存数据库(&#x27;崂山&#x27;)市南新数据字典 = 获得今天的新数据并存数据库(&#x27;市南&#x27;)def 增加数据(区域,新数据字典,老数据字典): 文本.append(区域) 文本.append(&#x27;能查到日期的户数：&#x27;+str(新数据字典[&#x27;能查到日期的户数&#x27;])+&#x27;户 &#x27;+str(新数据字典[&#x27;能查到日期的户数&#x27;]-老数据字典[&#x27;能查到日期的户数&#x27;])) 文本.append(&#x27;查不到日期的户数：&#x27;+str(新数据字典[&#x27;查不到日期的户数&#x27;])+&#x27;户 &#x27;+str(新数据字典[&#x27;查不到日期的户数&#x27;]-老数据字典[&#x27;查不到日期的户数&#x27;])) 文本.append(&#x27;到期日为当月的户数：&#x27;+str(新数据字典[&#x27;到期日为当月的户数&#x27;])+&#x27;户 &#x27;+str(新数据字典[&#x27;到期日为当月的户数&#x27;]-老数据字典[&#x27;到期日为当月的户数&#x27;])) 文本.append(&#x27;到期日为下月的户数：&#x27;+str(新数据字典[&#x27;到期日为下月的户数&#x27;])+&#x27;户 &#x27;+str(新数据字典[&#x27;到期日为下月的户数&#x27;]-老数据字典[&#x27;到期日为下月的户数&#x27;])) 文本.append(&#x27;今年已逾期的户数：&#x27;+str(新数据字典[&#x27;今年已逾期的户数&#x27;])+&#x27;户 &#x27;+str(新数据字典[&#x27;今年已逾期的户数&#x27;]-老数据字典[&#x27;今年已逾期的户数&#x27;])) # 文本.append(&#x27;今年还未到期的户数：&#x27;+str(新数据字典[&#x27;今年还未到期的户数&#x27;])+&#x27;户 &#x27;+str(新数据字典[&#x27;今年还未到期的户数&#x27;]-老数据字典[&#x27;今年还未到期的户数&#x27;])) 文本.append(&#x27;往年到期户：&#x27;+str(新数据字典[&#x27;往年到期户&#x27;])+&#x27;户 &#x27;+str(新数据字典[&#x27;往年到期户&#x27;]-老数据字典[&#x27;往年到期户&#x27;]))增加数据(&#x27;崂山&#x27;,崂山新数据字典,崂山老数据字典)增加数据(&#x27;市南&#x27;,市南新数据字典,市南老数据字典)c = &#x27;&#x27;for i in 文本: print(i) c += (&#x27;\\n&#x27;+i)print(c)发送邮件(&#x27;更新通知&#x27;,&#x27;崂山&#x27;,c,&#x27;**&#x27;,&#x27;**&#x27;,[&#x27;**&#x27;,&#x27;**&#x27;],&#x27;&#x27;,&#x27;&#x27;) 删除数据的脚本12345678910111213141516171819202122232425262728293031323334353637383940import pandas as pdimport os,sys,djangoimport xlrdclass 打开excel文件(): def __init__(self,文件名,第几个表): self.文件 = xlrd.open_workbook(filename = 文件名) self.表 = self.文件.sheet_by_index(第几个表-1) def 获得横向资料(self): self.数据 = [self.表.row_values(i) for i in range(self.表.nrows)] return self.数据 def 获得纵向资料(self): self.数据 = [self.表.col_values(i) for i in range(self.表.ncols)] return self.数据 def 获得名称列数据(self,名称): def 获得列序号(表名,查找字段名): 列序号 = None for i in range(表名.ncols): if (表名.cell_value(0,i) == 查找字段名): 列序号 = i break return 列序号 print(获得列序号(self.表,名称)) self.数据 = self.表.col_values(获得列序号(self.表,名称),1) return self.数据文件 = 打开excel文件(&#x27;市南可收费注销.xls&#x27;,1)list1 = 文件.获得名称列数据(&#x27;单位名称&#x27;)project_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.append(project_path)os.environ[&#x27;DJANGO_SETTINGS_MODULE&#x27;] = &#x27;shuai4.settings&#x27;django.setup()from cuifei.models import 催费表类催费表类.objects.filter(公司名称__in=list1).delete() 填充数据的脚本1234567891011121314151617181920212223242526272829303132333435import pandas as pdimport os,sys,djangoclass 提取类(): def __init__(self,文件名,第几个表): self.文件 = pd.read_excel(文件名, 第几个表) def 拿取数据(self,从第几行开始,*列名): self.数据 = self.文件.loc[从第几行开始-2:,[*列名,]] #print(self.数据) return self.数据销售表 = 提取类(&#x27;不可收名单.xls&#x27;,0)销售数据 = 销售表.拿取数据(2,&#x27;纳税人识别号&#x27;,&#x27;纳税人名称&#x27;)销售数据 = 销售数据.values.tolist()project_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.append(project_path)os.environ[&#x27;DJANGO_SETTINGS_MODULE&#x27;] = &#x27;shuai4.settings&#x27;django.setup()from cuifei.models import 催费表22年类# 催费表22年类.objects.all().update(是否可收=&#x27;可收&#x27;)for i in 销售数据: if 催费表22年类.objects.filter(税号=i[0]): 催费表22年类.objects.filter(税号=i[0]).update(是否可收=&#x27;不可收&#x27;) print(i[1]+&#x27;,通过税号确定不可收&#x27;) else: if 催费表22年类.objects.filter(公司名称=i[1]): 催费表22年类.objects.filter(公司名称=i[1]).update(是否可收=&#x27;不可收&#x27;) print(i[1]+&#x27;通过名称确定不可收&#x27;) else: print(i[1]+&#x27;发行表没有的不可收企业&#x27;) 批量导入数据脚本123456789101112131415161718192021222324252627282930import pandas as pdimport os,sys,djangoclass 提取类(): def __init__(self,文件名,第几个表): self.文件 = pd.read_excel(文件名, 第几个表) def 拿取数据(self,从第几行开始,*列名): self.数据 = self.文件.loc[从第几行开始-2:,[*列名,]] #print(self.数据) return self.数据销售表 = 提取类(&#x27;导入模板.xlsx&#x27;,0)销售数据 = 销售表.拿取数据(2,&#x27;公司名称&#x27;,&#x27;区域&#x27;,&#x27;税号&#x27;,&#x27;性质&#x27;)销售数据 = 销售数据.values.tolist()project_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.append(project_path)os.environ[&#x27;DJANGO_SETTINGS_MODULE&#x27;] = &#x27;shuai4.settings&#x27;django.setup()from cuifei.models import 催费表类list = []for i in 销售数据: # print(i[4]) list.append(催费表类(公司名称 = i[0],区域 = i[1],税号 = i[2],性质 = i[3]))催费表类.objects.bulk_create(list) 更新某一列数据脚本12345678910111213141516171819202122232425262728293031323334import pandas as pdimport os,sys,djangoclass 提取类(): def __init__(self,文件名,第几个表): self.文件 = pd.read_excel(文件名, 第几个表) def 拿取数据(self,从第几行开始,*列名): self.数据 = self.文件.loc[从第几行开始-2:,[*列名,]] #print(self.数据) return self.数据销售表 = 提取类(&#x27;/www/wwwroot/shuai4-django-env3.7/shuai4-django/时间.xls&#x27;,0)销售数据 = 销售表.拿取数据(2,&#x27;税号&#x27;,&#x27;名称&#x27;,&#x27;服务期限&#x27;)销售数据 = 销售数据.values.tolist()project_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.append(project_path)os.environ[&#x27;DJANGO_SETTINGS_MODULE&#x27;] = &#x27;shuai4.settings&#x27;django.setup()from cuifei.models import 催费表22年类for i in 销售数据: if 催费表22年类.objects.filter(税号=i[0]): 催费表22年类.objects.filter(税号=i[0]).update(到期日=i[2]) print(i[0]+&#x27;成功&#x27;) else: if 催费表22年类.objects.filter(公司名称=i[1]): 催费表22年类.objects.filter(公司名称=i[1]).update(到期日=i[2]) print(i[0]+&#x27;成功&#x27;) else: print(i[0]+&#x27;失败&#x27;)","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"}]},{"title":"使用易即今日API定时更新每日新闻图片","slug":"使用易即今日API定时更新每日新闻图片","date":"2022-03-09T08:05:24.000Z","updated":"2022-03-09T08:08:21.159Z","comments":true,"path":"2022/03/09/使用易即今日API定时更新每日新闻图片/","link":"","permalink":"https://zhongkangjk.github.io/2022/03/09/%E4%BD%BF%E7%94%A8%E6%98%93%E5%8D%B3%E4%BB%8A%E6%97%A5API%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E6%AF%8F%E6%97%A5%E6%96%B0%E9%97%BB%E5%9B%BE%E7%89%87/","excerpt":"更新脚本和定时任务","text":"更新脚本和定时任务 news-updated.py 12345678910import requestsurl = &quot;http://api.soyiji.com//news_jpg&quot;response = requests.request(&quot;GET&quot;, url)res = eval(response.text)图片地址 = res[&#x27;url&#x27;]headers = &#123; &#x27;Referer&#x27;: &#x27;safe.soyiji.com&#x27;&#125;response = requests.request(&quot;GET&quot;, 图片地址, headers=headers)# 图片文件保存with open(&#x27;/www/wwwroot/shuai4-django-env3.7/shuai4-django/collected_static/1.jpg&#x27;, &#x27;wb&#x27;) as f: f.write(response.content) 由于文件夹已经受nginx管理，不需要其他操作 绝对路径执行 1/www/wwwroot/shuai4-django-env3.7/bin/python /www/wwwroot/shuai4-django-env3.7/shuai4-django/news-updated.py","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://zhongkangjk.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Django日常操作","slug":"Django日常操作","date":"2022-03-09T07:52:21.000Z","updated":"2022-03-23T06:31:53.731Z","comments":true,"path":"2022/03/09/Django日常操作/","link":"","permalink":"https://zhongkangjk.github.io/2022/03/09/Django%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/","excerpt":"日常复制","text":"日常复制 创建应用django-admin startproject 项目名字 创建APPpython manage.py startapp APP名字 创建APP以后settings中增加INSTALLED_APPS,APP内增加分url 123456789# 引入pathfrom django.urls import path# 正在部署的应用的名称app_name = &#x27;APP名称&#x27;urlpatterns = [ # 目前还没有urls] 总url引入分url 12345from django.urls import path, includeurlpatterns = [ # 新增代码，配置app的url path(&#x27;定义url/&#x27;, include(&#x27;APP名称.urls&#x27;, namespace=&#x27;APP名称&#x27;)),] 写API函数分url 12345678from django.urls import pathfrom APP名称 import viewsapp_name = &#x27;APP名称&#x27;urlpatterns = [ path(&#x27;list/&#x27;,views.hellolist),] views 1234567from rest_framework.decorators import api_viewfrom rest_framework.response import Response@api_view([&#x27;GET&#x27;])def hellolist(request): list = [1,2,3,4,5] return Response(list)","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"}]},{"title":"Django伪监控小脚本","slug":"Django伪监控小脚本","date":"2022-03-09T07:10:51.000Z","updated":"2022-03-23T06:31:55.826Z","comments":true,"path":"2022/03/09/Django伪监控小脚本/","link":"","permalink":"https://zhongkangjk.github.io/2022/03/09/Django%E4%BC%AA%E7%9B%91%E6%8E%A7%E5%B0%8F%E8%84%9A%E6%9C%AC/","excerpt":"在django加个小模块来监控别的电脑情况以及执行指令","text":"在django加个小模块来监控别的电脑情况以及执行指令 服务端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#主urlpath(&#x27;utils/&#x27;, include(&#x27;utils.urls&#x27;)),#分urlpath(&#x27;xinxiview/&#x27;,views.XinxiView.as_view()),path(&#x27;zhilingview/&#x27;,views.ZhilingView.as_view()),#modelfrom django.db import modelsclass Dictionary(models.Model): # 字典名称 不可重复 name = models.CharField(max_length=50, unique=True) # 字典内容 data = models.TextField(blank=True,null=True) def __str__(self): return self.name#viewclass XinxiView(APIView): # permission_classes = [IsAuthenticated] def get(self, request, format=None): #获得model Dictionary里名称为税控盘信息的内容 税控盘信息 = Dictionary.objects.get(name=&#x27;税控盘信息&#x27;).data UK信息 = Dictionary.objects.get(name=&#x27;UK信息&#x27;).data 税控盘信息 = 税控盘信息.split(&#x27;\\n&#x27;) UK信息 = UK信息.split(&#x27;\\n&#x27;) 信息列表 = [税控盘信息,UK信息] return Response(信息列表) def post(self, request, format=None): name = request.data.get(&#x27;name&#x27;) xinxi = request.data.get(&#x27;xinxi&#x27;) # 更改Directory里name为name的body为xinxi Dictionary.objects.filter(name=name).update(data=xinxi) return Response(&#x27;更新成功&#x27;)class ZhilingView(APIView): # permission_classes = [IsAuthenticated] def get(self, request, format=None): name = request.query_params.get(&#x27;name&#x27;) # 获得model Dictionary里名称为name的body zhiling = Dictionary.objects.get(name=name).data Dictionary.objects.filter(name=name).update(data=&#x27;&#x27;) return Response(zhiling) def post(self, request, format=None): zhiling1 = request.data.get(&#x27;税控盘指令&#x27;) zhiling2 = request.data.get(&#x27;UK指令&#x27;) # 更改Directory里name为name的body为xinxi Dictionary.objects.filter(name=&#x27;税控盘指令&#x27;).update(data=zhiling1) Dictionary.objects.filter(name=&#x27;UK指令&#x27;).update(data=zhiling2) return Response(&#x27;更新指令成功&#x27;) 被监控端更新数据&amp;执行命令12345678910111213141516171819202122232425262728293031323334353637383940import requests,os,time,jsonimport psutilxinxiurl = &#x27;http://###/utils/xinxiview/&#x27;zhilingurl = &#x27;http://###/utils/zhilingview/&#x27;# 检测进程是否存在的函数 def check_process(process_name): for proc in psutil.process_iter(): try: # 检查进程名称返回进程对象 if process_name in proc.name(): return proc.pid except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess): pass return Nonedef 工作(): a = &#x27;&#x27; if check_process(&#x27;skp_usb_moniter.exe&#x27;): a+= &#x27;税控接口服务运行中,&#x27; else: a+= &#x27;税控接口服务未运行,&#x27; if check_process(&#x27;SunloginClient.exe&#x27;): a+= &#x27;向日葵运行中,&#x27; else: a+= &#x27;向日葵未运行,&#x27; print(a) r = requests.post(xinxiurl, data=&#123;&#x27;name&#x27;: &#x27;税控盘信息&#x27;, &#x27;xinxi&#x27;: a&#125;) print(r.text) # 发送get请求 r = requests.get(zhilingurl,params=&#123;&#x27;name&#x27;: &#x27;税控盘指令&#x27;&#125;) 指令 = r.text if 指令 == &#x27;&quot;重启程序&quot;&#x27;: os.system(&#x27;D:\\Desktop\\s.bat&#x27;) else: print(指令)while True: 工作() time.sleep(60) 前端获取数据&amp;发送指令12345678910111213//获取盘柜信息 vm.$u.api.getPanguiInfo = () =&gt; vm.$u.get(&#x27;/utils/xinxiview/&#x27;); //发送指令 vm.$u.api.sendOrder = (params) =&gt; vm.$u.post(&#x27;/utils/zhilingview/&#x27;, params);async reloadShuikongpan() &#123; const res = await this.$u.api.sendOrder(&#123; 税控盘指令: &#x27;重启程序&#x27; &#125;) this.$u.toast(res) &#125;,const res = await this.$u.api.getPanguiInfo()","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"},{"name":"前端","slug":"前端","permalink":"https://zhongkangjk.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"共享文件到局域网ip","slug":"共享文件到局域网ip","date":"2022-03-09T03:37:19.000Z","updated":"2022-03-09T03:38:15.348Z","comments":true,"path":"2022/03/09/共享文件到局域网ip/","link":"","permalink":"https://zhongkangjk.github.io/2022/03/09/%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%88%B0%E5%B1%80%E5%9F%9F%E7%BD%91ip/","excerpt":"局域网共享文件到ip","text":"局域网共享文件到ip 1234567891011121314import http.serverimport socketserverimport socketPORT = 80myname = socket.getfqdn(socket.gethostname())myaddr = socket.gethostbyname(myname)print(&#x27;请在局域网访问&#x27;+myaddr)Handler = http.server.SimpleHTTPRequestHandlerwith socketserver.TCPServer((&quot;&quot;, PORT), Handler) as httpd: #print(&quot;serving at port&quot;, PORT) httpd.serve_forever()","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"}]},{"title":"uniappH5转windows的步骤","slug":"uniappH5转windows的步骤","date":"2022-03-08T06:58:30.000Z","updated":"2022-03-23T06:30:16.588Z","comments":true,"path":"2022/03/08/uniappH5转windows的步骤/","link":"","permalink":"https://zhongkangjk.github.io/2022/03/08/uniappH5%E8%BD%ACwindows%E7%9A%84%E6%AD%A5%E9%AA%A4/","excerpt":"如标题","text":"如标题 安装nodejs安装electron（主程序）1npm install electron -g 安装electron-packager（打包用）1npm install electron-packager -g uniapp的manifest.json修改根目录下的manifest.json-h5配置 运行的基础路径修改为： 1./ 不然打包出来会出现白屏，读取不到，因为打包出来的h5默认加载地址为/static/ 1去掉启用https协议 不然会出现网络无法加载，去掉https不影响你请求后端的https协议。 h5打包HbuilderX顶部菜单栏-发布-h5手机版发行-发行 发现的默认目录为：unpackage\\dist\\build\\h5 新建文件123复制代码你的项目目录/├── static└── index.html 新建package.json和main.js12345复制代码新建后项目目录/├── static├── package.json├── main.js└── index.html 在 package.json 中添加如下内容123456复制代码&#123; &quot;name&quot; : &quot;app-name&quot;, &quot;version&quot; : &quot;0.1.0&quot;, &quot;main&quot; : &quot;main.js&quot;&#125; 在 main.js 中添加下面的内容，这个 main.js 文件就是上面 package.json 中的 “main”键 的值，所以可根据需要修改1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556const &#123;app, BrowserWindow,Menu&#125; = require(&#x27;electron&#x27;)const path = require(&#x27;path&#x27;)const url = require(&#x27;url&#x27;)// Keep a global reference of the window object, if you don&#x27;t, the window will// be closed automatically when the JavaScript object is garbage collected.let winfunction createWindow () &#123; Menu.setApplicationMenu(null) //取消菜单栏 // Create the browser window. win = new BrowserWindow(&#123;width: 375, height: 667&#125;) // and load the index.html of the app. win.loadURL(url.format(&#123; pathname: path.join(__dirname, &#x27;index.html&#x27;), protocol: &#x27;file:&#x27;, slashes: true &#125;)) // Open the DevTools. // win.webContents.openDevTools() // Emitted when the window is closed. win.on(&#x27;closed&#x27;, () =&gt; &#123; // Dereference the window object, usually you would store windows // in an array if your app supports multi windows, this is the time // when you should delete the corresponding element. win = null &#125;)&#125;// This method will be called when Electron has finished// initialization and is ready to create browser windows.// Some APIs can only be used after this event occurs.app.on(&#x27;ready&#x27;, createWindow)// Quit when all windows are closed.app.on(&#x27;window-all-closed&#x27;, () =&gt; &#123; // On macOS it is common for applications and their menu bar // to stay active until the user quits explicitly with Cmd + Q if (process.platform !== &#x27;darwin&#x27;) &#123; app.quit() &#125;&#125;)app.on(&#x27;activate&#x27;, () =&gt; &#123; // On macOS it&#x27;s common to re-create a window in the app when the // dock icon is clicked and there are no other windows open. if (win === null) &#123; createWindow() &#125;&#125;)// In this file you can include the rest of your app&#x27;s specific main process// code. You can also put them in separate files and require them here. 具体参考electron官网文档如果你的网页首页的文件名不是 “index.html”，那么请在 main.js 中将其中的 ‘index.html’ 修改为你的网页首页名 更新内容后再次使用HbuilderX生成h5前记得备份 package.json main.js打包1复制代码electron-packager . 可执行文件的文件名 --win --out 打包成的文件夹名 --arch=x64位还是32位 --electron-version版本号(不是你的h5版本号，是electron版本号) --overwrite --ignore=node_modules 示例（可直接复制下面代码）：1electron-packager . lan --win --out lan --arch=x64 --electron-version 17.1.0 --overwrite --ignore=node_modules --icon=2.ico","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"前端","slug":"计算机/前端","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://zhongkangjk.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"uniapp","slug":"uniapp","permalink":"https://zhongkangjk.github.io/tags/uniapp/"}]},{"title":"神武接下来的打造宝宝计划","slug":"神武接下来的打造宝宝计划","date":"2021-10-05T13:40:35.000Z","updated":"2022-03-09T11:44:59.104Z","comments":true,"path":"2021/10/05/神武接下来的打造宝宝计划/","link":"","permalink":"https://zhongkangjk.github.io/2021/10/05/%E7%A5%9E%E6%AD%A6%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%89%93%E9%80%A0%E5%AE%9D%E5%AE%9D%E8%AE%A1%E5%88%92/","excerpt":"在秋水的指导下懂了需要打造宝宝，计划","text":"在秋水的指导下懂了需要打造宝宝，计划 卡速两个卡速宝宝，一个带隐身一个不带隐身完全可以用罗成青瓷鸡这种垃圾的来做 参考如图 血攻可以就用我那个死骑，元宵吃31个攻，19个体 气势换吸血 感知审判少哪个都行 看护符 速度到420，气血加到3500，打符攻击争取到1520 感知群法雪舞洗出来了 敏捷不要，冰霜换感知 血3000 灵700到750 元宵吃体剩下法符石开红色 灵力 30+ 龟速宠小号可以洗洗 要鬼魂，鬼魂不吃冲击，不死的话能保证尾速拉人","categories":[{"name":"游戏","slug":"游戏","permalink":"https://zhongkangjk.github.io/categories/%E6%B8%B8%E6%88%8F/"},{"name":"神武","slug":"游戏/神武","permalink":"https://zhongkangjk.github.io/categories/%E6%B8%B8%E6%88%8F/%E7%A5%9E%E6%AD%A6/"}],"tags":[{"name":"神武","slug":"神武","permalink":"https://zhongkangjk.github.io/tags/%E7%A5%9E%E6%AD%A6/"}]},{"title":"本博客上线更新的方法","slug":"本博客上线更新的方法","date":"2021-10-02T11:43:10.000Z","updated":"2021-10-02T11:56:31.571Z","comments":true,"path":"2021/10/02/本博客上线更新的方法/","link":"","permalink":"https://zhongkangjk.github.io/2021/10/02/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF%E6%9B%B4%E6%96%B0%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"gitpage还是稍微拉胯了点，还是部署到~上吧","text":"gitpage还是稍微拉胯了点，还是部署到~上吧 拉代码1git clone 我的博客代码 网站文件夹 写脚本在网站文件夹里建立一个脚本,记得给执行权限方便计划任务调用gengxin.sh 12345#！/bin/bashcd /www/wwwroot/网站文件夹git fetch --allgit reset --hard origin/mastergit pull 设置定时任务如题，定时执行一下拉取脚本就可以了","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"linux","slug":"计算机/linux","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://zhongkangjk.github.io/tags/linux/"}]},{"title":"兼听则明，偏信则暗","slug":"兼听则明，偏信则暗","date":"2021-09-20T07:31:16.000Z","updated":"2021-10-04T10:55:32.926Z","comments":true,"path":"2021/09/20/兼听则明，偏信则暗/","link":"","permalink":"https://zhongkangjk.github.io/2021/09/20/%E5%85%BC%E5%90%AC%E5%88%99%E6%98%8E%EF%BC%8C%E5%81%8F%E4%BF%A1%E5%88%99%E6%9A%97/","excerpt":"为自己对抗信息茧房写点东西","text":"为自己对抗信息茧房写点东西 很久没有过成长的感觉了 以前对自己成长的看法就像自然选择，通过遇到各种各样的事情，迈过它，然后变得更好，更像自己。 不知道什么时候开始接触到的东西越来越少，甚至不如以前 那个拿着BBK深夜在网上搜罗各行各业的书籍对自己未来进行畅想的自己 现在遇到的都是相同的事情，就算偶尔有些波澜，那就把它转换为跟从前类似的状况，然后用老办法对待他 懒 。 找了个锅 一定是无处不在的大数据推荐系统带来的信息茧房束缚了我 “在贴心的大数据式喂养下，用户依旧拥有选择的权利，却慢慢被剥夺了选择的能力与动力。 信息茧房进入了最终极状态 - 即便一个人的兴趣爱好是吃屎，大数据也能帮他找到一万个同好，并告诉他，你不孤单，请保持。 信息茧房使人们变得自满，易怒，常常走极端。 人们比曾经任何时代都更接近信息，却离探索真相越来越远。 ”@维京女侠 知乎看到的。 想起了自己使用知乎的一件趣事， 当时刚刚下载了知乎（也不知道是第几次，感觉以前有下载过，但很久了） 浏览到大概是个人生低谷相关的话题，刚好它遇到挫折的某件事是我战胜过的，于是发表了一些看法。 然后就一发不可收拾，每个几个小时，就是推送邀请回答，一模一样的问题，不同的人，还好我会屏蔽通知，但每次进入知乎就是一大串红色提醒，点进去都是那些，俨然一副我是相关问题大牛的样子。 我开始找屏蔽这个的操作，没找着，或者说没生效。 联系知乎客服， 时间有点久，记不清了，想打开知乎找找聊天记录，一番操作以后没找着，反正是没有结果的结果。 我在想如果所有的知乎使用者都是这种状态，那发展真的是， 我也不知道。 回想一下正题， 我得告诉自己对抗这个，虽然现在没什么方向，但随波逐流我肯定不乐意。 我不管，我最大。 主动检索信息，主动检索信息！","categories":[{"name":"随笔","slug":"随笔","permalink":"https://zhongkangjk.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://zhongkangjk.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"pandas相关操作","slug":"pandas相关操作","date":"2021-09-05T12:53:22.000Z","updated":"2021-09-05T13:12:28.721Z","comments":true,"path":"2021/09/05/pandas相关操作/","link":"","permalink":"https://zhongkangjk.github.io/2021/09/05/pandas%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/","excerpt":"pandas的操作都记在这里吧","text":"pandas的操作都记在这里吧 pandas提取excel123456789101112import pandas as pdclass 提取类(): def __init__(self,文件名,第几个表): self.文件 = pd.read_excel(文件名, 第几个表) def 拿取数据(self,从第几行开始,*列名): self.数据 = self.文件.loc[从第几行开始-2:,[*列名,]] #print(self.数据) return self.数据# 处理日期和数字空值12345678910数据文件名 = &quot;名称.xlsx&quot;def 销售表提取(): 销售表 = 提取类(数据文件名,0) 销售数据 = 销售表.拿取数据(8234,&#x27;企业名称&#x27;,&#x27;日期&#x27;,&#x27;服务费发票&#x27;,&#x27;金额&#x27;,&#x27;支付方式&#x27;) 销售数据[&#x27;发票类型&#x27;] = &#x27;纸票&#x27; #空着的日期按照前一个来 销售数据[&#x27;日期&#x27;].fillna(method=&quot;ffill&quot;,inplace=True) #格式化日期，标记空日期 销售数据[&#x27;日期&#x27;] = 销售数据[&#x27;日期&#x27;].apply(lambda x:x.strftime(&#x27;%Y-%m-%d&#x27;) if x == x and type(x) != type(&#x27;sd&#x27;) else &#x27;日期为空&#x27;) 销售数据[&#x27;金额&#x27;] = 销售数据[&#x27;金额&#x27;].apply(lambda x:str(int(x)) if x == x else x) 转为列表1销售数据 = 销售数据.values.tolist() 合并相同数据将A栏重复值所对应的B栏数据合并 销售数据 A B C 数据A 1 5 数据A 2 5 数据B 1 5 12# 将A栏重复值所对应的B栏数据合并销售数据[&#x27;B&#x27;] = 销售数据.groupby(&#x27;A&#x27;)[&#x27;B&#x27;].transform(&#x27;,&#x27;.join) 销售数据-新| A | B | C || —– | —- | —- || 数据A | 1,2 | 5 || 数据A | 1,2 | 5 || 数据B | 1 | 5 | 之后可以去重","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://zhongkangjk.github.io/tags/pandas/"}]},{"title":"写在django-admin里的异步爬虫按钮和日期计算","slug":"写在django-admin里的异步爬虫按钮","date":"2021-08-23T10:58:10.000Z","updated":"2022-04-26T14:50:03.666Z","comments":true,"path":"2021/08/23/写在django-admin里的异步爬虫按钮/","link":"","permalink":"https://zhongkangjk.github.io/2021/08/23/%E5%86%99%E5%9C%A8django-admin%E9%87%8C%E7%9A%84%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E6%8C%89%E9%92%AE/","excerpt":"用httpx的异步方法来更新requests的，快了一些","text":"用httpx的异步方法来更新requests的，快了一些 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145from django.contrib import adminfrom django.http import HttpResponsefrom import_export import resourcesfrom import_export.admin import ImportExportModelAdmin, ImportExportActionModelAdminfrom dateutil.relativedelta import relativedeltaimport json,requestsfrom cuifei.models import 催费表类,可收表19年,可收表20年,催费表22年类from shuju.models import 数据通知表类from utils.models import Dictionaryimport httpx,json,time,mathimport asyncio,datetime,calendarfrom django.forms import TextInput, Textareafrom django.db import modelsfrom django.db.models import Q#引入 Workbookfrom openpyxl import Workbookfrom django.http import HttpResponseadmin.site.site_header = &#x27;催费&#x27;admin.site.site_title = &#x27;催费&#x27;def 取结果(r): if r[&#x27;obj&#x27;]: j = [] for i in r[&#x27;obj&#x27;]: j.append(i[&#x27;fwqx&#x27;]) return max(j),r[&#x27;obj&#x27;][0][&#x27;jbrdh&#x27;] else: return None,Noneheaders = &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;Authorization&#x27;: &#x27;**************&#x27;,&#125;url_by_税号 = &#x27;************&#x27;查税号URL= &#x27;******************&#x27;@admin.register(催费表22年类)class 催费表22管理(ImportExportActionModelAdmin): list_display = (&#x27;公司名称***************&#x27;) search_fields = (&#x27;公司名称********************&#x27;) list_per_page = 20 date_hierarchy = &#x27;到期日&#x27; #时间导航栏 list_filter = (&#x27;区域&#x27;,&#x27;性质&#x27;,&#x27;到期日&#x27;,UpdatedAtFilter,) #筛选器 list_display_links = (&#x27;公司名称&#x27;,) #点击修改 formfield_overrides = &#123; models.CharField: &#123;&#x27;widget&#x27;: TextInput(attrs=&#123;&#x27;size&#x27;:&#x27;20&#x27;&#125;)&#125;, models.TextField: &#123;&#x27;widget&#x27;: Textarea(attrs=&#123;&#x27;rows&#x27;:1, &#x27;cols&#x27;:50&#125;)&#125;, &#125; actions = [&#x27;更新可收年份&#x27;,&#x27;更新到期日和时间&#x27;,&#x27;export_admin_action&#x27;] def get_actions(self, request): actions = super(催费表22管理,self).get_actions(request) print(actions) if request.user.username != &#x27;admin&#x27;: del actions[&#x27;更新到期日和时间&#x27;] return actions def 更新到期日和时间(modeladmin, request, queryset): async def 爬(client,body): def 保存结果(结果,body): body.到期日 = 结果[0] # body.经办人电话 = 结果[1] body.save(update_fields=[&#x27;到期日&#x27;]) r = await client.post(url_by_税号,headers=headers, data=json.dumps(&#123;&#x27;khsbh&#x27;: body.税号,&#125;),timeout=None) 结果 = 取结果(r.json()) if 结果[0]: 保存结果(结果,body) else: 用名称查的data = json.dumps(&#123;&#x27;count&#x27;:100,&#x27;keyword&#x27;: body.公司名称,&#x27;page&#x27;:0&#125;) r = await client.post(查税号URL,headers=headers, data=用名称查的data,timeout=None) res_dict = r.json() if res_dict[&#x27;obj&#x27;]: 税号1 = res_dict[&#x27;obj&#x27;][-1][&#x27;khsbh&#x27;] r1 = await client.post(url_by_税号,headers=headers, data=json.dumps(&#123;&#x27;khsbh&#x27;: 税号1,&#125;),timeout=None) 结果1 = 取结果(r1.json()) 保存结果(结果1,body) else: return None,None async def 跑(): async with httpx.AsyncClient() as client: task_list = [] for i in queryset: req = 爬(client,i) task = asyncio.create_task(req) task_list.append(task) await asyncio.gather(*task_list) start = time.time() asyncio.run(跑()) end = time.time() print(end-start) print(&#x27;查日期完成于&#x27;+time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())) def 更新可收年份(modeladmin, request, queryset): for i in queryset: if i.到期日: if type(i.到期日) == type(&#x27;s&#x27;): 到期日 = datetime.datetime.strptime(i.到期日,&#x27;%Y-%m-%d&#x27;).date() else: 到期日 = i.到期日 # print(i.公司名称,i.税号) a = 可收表19年.objects.filter(公司名称__exact = i.公司名称).count() if a &gt; 0: i.可收19 = 1 else: i.可收19 = 0 b = 可收表20年.objects.filter(Q(公司名称__exact = i.公司名称)|Q(税号__exact = i.税号)).count() if b &gt; 0: i.可收20 = 1 else: i.可收20 = 0 c = 催费表类.objects.filter(Q(公司名称__exact = i.公司名称)|Q(税号__exact = i.税号)).count() if c &gt; 0: i.可收21 = 1 else: i.可收21 = 0 # print(i.到期日) # print(datetime.date.today()) 年 = datetime.datetime.now().year 月 = datetime.datetime.now().month 下一个月 = (datetime.datetime.now()+relativedelta(months=1)).month # 日 = datetime.datetime.now().day # 新日 = calendar.monthrange(年,月)[1] 新日 = calendar.monthrange(年,下一个月)[1] # print(新日) # print(datetime.date(年,月,新日)==i.到期日) if datetime.date(年,下一个月,新日)==到期日: 差年= 1 else: 差年 = math.ceil((datetime.date(年,下一个月,新日)-到期日)/datetime.timedelta(days=365)) # print(差年) 到期日年份 = i.到期日.year 可收字典 = &#123;2015:1,2016:1,2017:1,2018:1,2019:i.可收19,2020:i.可收20,2021:i.可收21,2022:1&#125; # 年份 = sum(listn[:差年]) j = 0 for i1 in range(到期日年份,到期日年份+差年): # print(i1) j += 可收字典[i1] # print(j) i.几年 = j i.save(update_fields=[&#x27;可收19&#x27;,&#x27;可收20&#x27;,&#x27;可收21&#x27;,&#x27;几年&#x27;]) TIPSasyncio.run()和asyncio.create_task()这之类的函数要python3.7以后才能用","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"},{"name":"httpx","slug":"httpx","permalink":"https://zhongkangjk.github.io/tags/httpx/"},{"name":"datetime","slug":"datetime","permalink":"https://zhongkangjk.github.io/tags/datetime/"}]},{"title":"在windows添加webDAV网络位置","slug":"在windows添加webDAV网络位置","date":"2021-08-18T11:43:54.000Z","updated":"2021-08-18T11:48:53.060Z","comments":true,"path":"2021/08/18/在windows添加webDAV网络位置/","link":"","permalink":"https://zhongkangjk.github.io/2021/08/18/%E5%9C%A8windows%E6%B7%BB%E5%8A%A0webDAV%E7%BD%91%E7%BB%9C%E4%BD%8D%E7%BD%AE/","excerpt":"为了方便同步数据，特给Cloudreve所提供的webDAV加到我的windows上","text":"为了方便同步数据，特给Cloudreve所提供的webDAV加到我的windows上 修改注册表修改注册表计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WebClient\\Parameters的BasicAuthLevel值为2，此意为同时支持同时支持http和https，默认只支持https 重启服务服务名称为webclient 添加在Windows资源管理器空白处右键，选添加一个网络位置，填写地址，用户名和密码即可","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"webDAV","slug":"webDAV","permalink":"https://zhongkangjk.github.io/tags/webDAV/"}]},{"title":"更改django-admin的TextField显示长宽度","slug":"更改django-admin的TextField显示长宽度","date":"2021-08-17T10:34:06.000Z","updated":"2021-08-17T10:43:13.625Z","comments":true,"path":"2021/08/17/更改django-admin的TextField显示长宽度/","link":"","permalink":"https://zhongkangjk.github.io/2021/08/17/%E6%9B%B4%E6%94%B9django-admin%E7%9A%84TextField%E6%98%BE%E7%A4%BA%E9%95%BF%E5%AE%BD%E5%BA%A6/","excerpt":"今天想把django-admin的TextField字段改成快速更改，但发现太大了，格格不入","text":"今天想把django-admin的TextField字段改成快速更改，但发现太大了，格格不入 代码123456789101112#在admin.py中from django.forms import TextInput, Textareafrom django.db import modelsclass YourModelAdmin(admin.ModelAdmin): formfield_overrides = &#123; models.CharField: &#123;&#x27;widget&#x27;: TextInput(attrs=&#123;&#x27;size&#x27;:&#x27;20&#x27;&#125;)&#125;, models.TextField: &#123;&#x27;widget&#x27;: Textarea(attrs=&#123;&#x27;rows&#x27;:1, &#x27;cols&#x27;:50&#125;)&#125;, &#125;admin.site.register(YourModel, YourModelAdmin) 备注给Textarea改成一行 长度50就差不多了得根据预览情况，多了也没试","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"}]},{"title":"批量把当前文件夹内的word文档转换为pdf","slug":"批量把当前文件夹内的word文档转换为pdf","date":"2021-08-13T13:51:00.000Z","updated":"2022-03-23T06:28:28.265Z","comments":true,"path":"2021/08/13/批量把当前文件夹内的word文档转换为pdf/","link":"","permalink":"https://zhongkangjk.github.io/2021/08/13/%E6%89%B9%E9%87%8F%E6%8A%8A%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E5%A4%B9%E5%86%85%E7%9A%84word%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2%E4%B8%BApdf/","excerpt":"批量把当前文件夹内的word文档转换为pdf","text":"批量把当前文件夹内的word文档转换为pdf 代码1234567891011121314151617181920from win32com.client import Dispatchfrom os import walk,getcwddef doc2pdf(input_file): word = Dispatch(&#x27;Word.Application&#x27;) doc = word.Documents.Open(input_file) doc.SaveAs(input_file.replace(&quot;.doc&quot;, &quot;.pdf&quot;), FileFormat=17) doc.Close() word.Quit()if __name__ == &quot;__main__&quot;: doc_files = [] directory = getcwd() for root, dirs, filenames in walk(directory): for file in filenames: if file.endswith(&quot;.doc&quot;) or file.endswith(&quot;.docx&quot;): print(file) doc2pdf(str(root + &quot;\\\\&quot; + file)) 备注其中SaveAs中第二个参数FileFormat=17是指定保存文档时使用的格式，17是PDF 以下是参考 1234567891011121314151617181920212223242526WdSaveFormat 枚举 指定要在保存文档时使用的格式。 版本信息 已添加版本： 名称 值 说明 wdFormatDocument 0 Microsoft Word 格式。 wdFormatDOSText 4 Microsoft DOS 文本格式。 wdFormatDOSTextLineBreaks 5 Microsoft DOS 文本格式，并且保留换行符。 wdFormatEncodedText 7 编码文本格式。 wdFormatFilteredHTML 10 筛选的 HTML 格式。 wdFormatHTML 8 标准 HTML 格式。 wdFormatRTF 6 RTF 格式。 wdFormatTemplate 1 Word 模板格式。 wdFormatText 2 Microsoft Windows 文本格式。 wdFormatTextLineBreaks 3 Windows 文本格式，并且保留换行符。 wdFormatUnicodeText 7 Unicode 文本格式。 wdFormatWebArchive 9 Web 档案格式。 wdFormatXML 11 可扩展标记语言 (XML) 格式。 wdFormatDocument97 0 Microsoft Word 97 文档格式。 wdFormatDocumentDefault 16 Word 默认文档文件格式。对于 Word 2010，这是 DOCX 格式。 wdFormatPDF 17 PDF 格式。 wdFormatTemplate97 1 Word 97 模板格式。 wdFormatXMLDocument 12 XML 文档格式。 wdFormatXMLDocumentMacroEnabled 13 启用了宏的 XML 文档格式。 wdFormatXMLTemplate 14 XML 模板格式。 wdFormatXMLTemplateMacroEnabled 15 启用了宏的 XML 模板格式。 wdFormatXPS 18 XPS 格式。 文档网址 https://docs.microsoft.com/zh-cn/office/vba/api/word.wdsaveformat","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"word","slug":"word","permalink":"https://zhongkangjk.github.io/tags/word/"},{"name":"pdf","slug":"pdf","permalink":"https://zhongkangjk.github.io/tags/pdf/"}]},{"title":"centos8安装python3.7","slug":"centos8安装python3-7","date":"2021-08-10T13:42:18.000Z","updated":"2022-03-23T06:33:12.243Z","comments":true,"path":"2021/08/10/centos8安装python3-7/","link":"","permalink":"https://zhongkangjk.github.io/2021/08/10/centos8%E5%AE%89%E8%A3%85python3-7/","excerpt":"因为得在破腾讯的轻量上安装python3.7，不太好弄找了个攻略","text":"因为得在破腾讯的轻量上安装python3.7，不太好弄找了个攻略 1、执行以下命令，更新yum源 1yum update 2、安装依赖包 1yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make 3、下载安装包 1wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz 4、解压 1tar -xf Python-3.7.6.tar.xz 5、编译安装 12345678910#创建安装目录mkdir /usr/local/python-3.7.6#进入安装目录cd Python-3.7.6#配置编译的路径./configure --prefix=/usr/local/python3.7.6 --with-ssl#按提示继续命令./configure --enable-optimizations#开始编译make &amp;&amp; make install 6、验证是否成功 12python3 -Vpip3 -V 原文链接：https://blog.csdn.net/ispeasant/article/details/107791316","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"linux","slug":"计算机/linux","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/linux/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"linux","slug":"linux","permalink":"https://zhongkangjk.github.io/tags/linux/"}]},{"title":"自己备份django数据库的每天发邮件设置","slug":"自己备份django数据库的每天发邮件设置","date":"2021-07-26T13:26:13.000Z","updated":"2022-03-23T06:29:01.916Z","comments":true,"path":"2021/07/26/自己备份django数据库的每天发邮件设置/","link":"","permalink":"https://zhongkangjk.github.io/2021/07/26/%E8%87%AA%E5%B7%B1%E5%A4%87%E4%BB%BDdjango%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%AF%8F%E5%A4%A9%E5%8F%91%E9%82%AE%E4%BB%B6%E8%AE%BE%E7%BD%AE/","excerpt":"用的单文件sq3比较好复制于是直接用邮件发送的方式来备份","text":"用的单文件sq3比较好复制于是直接用邮件发送的方式来备份 1234567891011121314151617181920212223242526272829303132333435363738394041import smtplibfrom email.mime.multipart import MIMEMultipartfrom email.mime.text import MIMETextfrom email.mime.application import MIMEApplicationimport os,datetime_user = &quot;---&quot;_pwd = &quot;---&quot;_to = &quot;---&quot;today = datetime.date.today().strftime(&#x27;%y%m%d&#x27;)msg = MIMEMultipart()msg[&quot;Subject&quot;] = today+&#x27;数据库备份&#x27;msg[&quot;From&quot;] = _usermsg[&quot;To&quot;] = _topart = MIMEText(&#x27;这是&#x27;+ today + &#x27;份的数据文件&#x27;)msg.attach(part)#---这是附件部分---for name in os.listdir(): if &quot;db.sqlite3&quot; in name : part = MIMEApplication(open(name,&#x27;rb&#x27;).read()) part.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=today+&#x27;.sqlite3&#x27;) msg.attach(part) breaks = smtplib.SMTP(&quot;smtp.qq.com&quot;, timeout=60)try: s.login(_user, _pwd) s.sendmail(_user, _to, msg.as_string()) s.close() print(&quot;发送成功&quot;)except: print(&quot;发送失败&quot;)# 同文件夹下发送邮件.sh内容&#x27;&#x27;&#x27;#!/bin/bashcd /home/sites/173.82.120.157/MasterYi_Django_blog&amp;&amp;python3 发送邮件.pycrontab -e19 1 * * * sh /home/sites/173.82.120.157/MasterYi_Django_blog/发送邮件.sh&#x27;&#x27;&#x27;","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"}]},{"title":"python小功能操作合集","slug":"python小功能操作合集","date":"2021-07-26T13:07:31.000Z","updated":"2022-03-23T06:31:57.076Z","comments":true,"path":"2021/07/26/python小功能操作合集/","link":"","permalink":"https://zhongkangjk.github.io/2021/07/26/python%E5%B0%8F%E5%8A%9F%E8%83%BD%E6%93%8D%E4%BD%9C%E5%90%88%E9%9B%86/","excerpt":"记录一些python常用的小功能模块使用","text":"记录一些python常用的小功能模块使用 发送邮件及附件12345678910111213141516171819202122232425262728import smtplibfrom email.mime.multipart import MIMEMultipartfrom email.mime.text import MIMETextfrom email.mime.application import MIMEApplicationdef 发送邮件(邮件标题,称呼,邮件文字,发件人邮箱,密码,收件人邮箱,附件路径列表,附件命名列表): msg = MIMEMultipart() msg[&quot;Subject&quot;] = 邮件标题 msg[&quot;From&quot;] = 发件人邮箱 msg[&quot;To&quot;] = 称呼 #这是文字部分 part = MIMEText(邮件文字) msg.attach(part) #这是附件部分 for 附件路径,附件命名 in zip(附件路径列表,附件命名列表): part = MIMEApplication(open(附件路径,&#x27;rb&#x27;).read()) part.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=附件命名) msg.attach(part) s = smtplib.SMTP(&quot;smtp.qq.com&quot;, timeout=60)#SMTP服务的网址 try: s.login(发件人邮箱, 密码) s.sendmail(发件人邮箱, 收件人邮箱, msg.as_string())#收件人邮箱可以是列表 s.close() print(&quot;发送成功&quot;) except: print(&quot;发送失败&quot;) win32操作相关的123456789101112131415161718192021222324252627282930313233343536import win32gui,win32con,win32api# 操作win32相关def 点击(id): win32gui.SendMessage(id,win32con.WM_LBUTTONDOWN, 0,0) win32gui.PostMessage(id,win32con.WM_LBUTTONUP, 0,0)def 填信息(id,text): win32gui.SendMessage(id,win32con.WM_SETTEXT, 0,text)def 发送回车(id): win32gui.SendMessage(id,win32con.WM_KEYDOWN, win32con.VK_RETURN,0) win32gui.PostMessage(id,win32con.WM_KEYUP, win32con.VK_RETURN,0)def 列出子窗口句柄(id): hwndChildList = [] win32gui.EnumChildWindows(id, lambda hwnd,param: param.append(hwnd),hwndChildList) n = 0 for i in hwndChildList: print(i ,&quot;&#123;:#016X&#125;&quot;.format(i),win32gui.GetWindowText(i),n) n += 1 return hwndChildListdef 获得窗口标题的句柄(name): hwndChildList = [] win32gui.EnumChildWindows(None, lambda hwnd,param: param.append(hwnd),hwndChildList) for i in hwndChildList: if name in win32gui.GetWindowText(i): return idef 提取句柄文本(句柄): # 获取识别结果中输入框文本 length = win32gui.SendMessage(句柄, win32con.WM_GETTEXTLENGTH)+1 buf = win32gui.PyMakeBuffer(length) #发送获取文本请求 win32api.SendMessage(句柄, win32con.WM_GETTEXT, length, buf) #下面应该是将内存读取文本 address, length = win32gui.PyGetBufferAddressAndLen(buf[:-1]) text = win32gui.PyGetString(address, length) return text#print(提取句柄文本(列出子窗口句柄(获得窗口标题的句柄(&#x27;来电接听&#x27;))[41])) 连续点击数据的tkinter1234567891011121314151617181920212223242526272829303132333435363738from tkinter import *from tkinter import ttkdef 连续点击tkinter(): 表1 = [1,2,3] 表2 = [4,5,6] 表3 = [7,8,9] 表 = [表1,表2,表3] def 选表(): players[&quot;values&quot;] = 表[var.get()-1] players.current(0) #默认第一个开始 def 执行查找(*args): #使用players.get() #然后自增 players.set(players[&quot;values&quot;][players[&quot;values&quot;].index(players.get())+1]) root = Tk() var = IntVar() var.set(1) name = StringVar() root.wm_attributes(&#x27;-topmost&#x27;,1) 单选框1 = Radiobutton(root, text=&quot;表1&quot;, value=1, variable=var, command = 选表).pack() 单选框2 = Radiobutton(root, text=&quot;表2&quot;, value=2, variable=var, command = 选表).pack() 单选框2 = Radiobutton(root, text=&quot;表3&quot;, value=3, variable=var, command = 选表).pack() players = ttk.Combobox(root, textvariable=name,width=50) players[&quot;values&quot;] = 表1 players[&quot;state&quot;] = &quot;readonly&quot; players.current(0) # players.set(&quot;演员表&quot;) # print(players.get()) players.pack() Button(root,text = &quot;点击查询&quot;,command = 执行查找,width=50,height=20).pack() root.mainloop() 爬虫获取post接口数据12345678910111213141516171819202122232425262728293031import jsonimport requestsdef 爬虫获取post数据(): postUrl = &#x27;&#x27; # 请求头设置 payloadHeader = &#123; &#x27;Host&#x27;: &#x27;&#x27;, &#x27;Origin&#x27;: &#x27;&#x27;, #&#x27;Cookie&#x27;: &#x27;&#x27;, &#x27;Referer&#x27;: &#x27;&#x27;, &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36&#x27;, &#x27;Content-Type&#x27;: &#x27;application/json&#x27;, &#x27;Content-Length&#x27;: &#x27;32&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;, &#x27;Authorization&#x27;: &#x27;bearer eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1NDE1OTQ4NjAsInN1YiI6ImJ3eWRiZyJ9.t_XDqE2CaCSxg_Mtw5BrgUCTFpjpmU9oyI32oGPO9wY&#x27;, &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh;q=0.9&#x27;, &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;, &#x27;Accept&#x27;: &#x27;application/json, text/plain, */*&#x27;, &#125; # 下载超时 timeOut = 25 # payloadData数据 payloadData = &#123; &#x27;&#x27;: &quot;&quot; &#125; dumpJsonData = json.dumps(payloadData) res = requests.post(postUrl, data=dumpJsonData, headers=payloadHeader, timeout=timeOut, allow_redirects=False) res_dict = eval(res.text) 信息列表 = [] #123123 return 信息列表 selenium相关操作1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162from selenium.webdriver.chrome.options import Options# chrome_options = Options()# #chrome_options.add_experimental_option(&quot;debuggerAddress&quot;, &quot;127.0.0.1:9222&quot;)# chrome_driver = &quot;chromedriver.exe&quot;# driver = webdriver.Chrome(chrome_driver, chrome_options=chrome_options)from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support.expected_conditions import presence_of_element_locatedimport time# driver.find_elements_by_id(&quot;cheddar&quot;)# driver.find_element_by_css_selector(&quot;#cheese #cheddar&quot;)# driver.find_elements_by_class_name()# driver.find_element_by_xpath()# driver..find_element_by_link_text(&quot;新闻&quot;)def 例子(): with webdriver.Chrome() as driver: wait = WebDriverWait(driver, 10 , 0.5) #显式等待 until / until_not driver.implicitly_wait(10) #隐性等待 driver.get(&quot;https://www.baidu.com&quot;) #发送请求 #driver.refresh() #刷新浏览器 #driver.set_window_size(1400,800) #设置浏览器大小 driver.maximize_window() #浏览器窗口最大化 driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;selenium&quot;,Keys.ENTER) #driver.find_element_by_id(&quot;su&quot;).click() time.sleep(10) first_result = wait.until(presence_of_element_located((By.CSS_SELECTOR, &quot;h3&gt;div&quot;))) #print(first_result.get_attribute(&quot;textContent&quot;))def 综合(): #先快捷方式后加&#x27; --remote-debugging-port=9222 --user-data-dir=&quot;C:\\selenum\\AutomationProfile&quot; https://live.bwjf.com/dashboard&#x27;打开浏览器 chrome_options = Options() chrome_options.add_experimental_option(&quot;debuggerAddress&quot;, &quot;127.0.0.1:9222&quot;) chrome_driver = r&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chromedriver.exe&quot; driver = webdriver.Chrome(chrome_driver, chrome_options=chrome_options) driver.implicitly_wait(10) def 点击按钮(按钮位置): time.sleep(0.2) driver.find_element_by_xpath(按钮位置).click() def 填写内容(按钮位置,内容): driver.find_element_by_xpath(按钮位置).send_keys(内容) def 选择下拉框(按钮位置,选项): 点击按钮(按钮位置) time.sleep(0.1) 点击选项 = driver.find_element_by_xpath(&#x27;&#x27;&#x27;//span[text()=&quot;&#x27;&#x27;&#x27;+选项+&#x27;&#x27;&#x27;&quot;]&#x27;&#x27;&#x27;) print(点击选项) 点击选项.click() def 选择下拉框特殊(按钮位置,选项): 点击按钮(按钮位置) time.sleep(0.1) 点击选项 = driver.find_element_by_css_selector(&#x27;body &gt; div.el-select-dropdown.el-popper &gt; div.el-scrollbar &gt; div.el-select-dropdown__wrap.el-scrollbar__wrap &gt; ul &gt; li.el-select-dropdown__item:nth-child(2)&#x27;) 点击选项.click() def 输入后选择下拉框(按钮位置,内容和选项): 填写内容(按钮位置,内容和选项) print(&#x27;&#x27;&#x27;//span[text()=&quot;&#x27;&#x27;&#x27;+内容和选项+&#x27;&#x27;&#x27;&quot;]&#x27;&#x27;&#x27;) time.sleep(0.1) 选项出现 = driver.find_element_by_xpath(&#x27;&#x27;&#x27;//span[text()=&quot;&#x27;&#x27;&#x27;+内容和选项+&#x27;&#x27;&#x27;&quot;]&#x27;&#x27;&#x27;) time.sleep(0.5) 选项出现.click() django导入库数据1234567891011121314151617181920212223242526import os,sys,django,xlrd# 本文件在manage.py同文件夹下def django导入库数据(): 文件名 = &#x27;表.xls&#x27; 读取的Excel = xlrd.open_workbook(filename = 文件名) 文件内第一个表= 读取的Excel.sheet_by_index(0) # def 获得列序号(表名,查找字段名): # 列序号 = None # for i in range(表名.ncols): # if (表名.cell_value(0,i) == 查找字段名): # 列序号 = i # break # return 列序号 #竖向资料 = [文件内第一个表.col_values(i) for i in range(文件内第一个表.ncols)] 横向资料 = [文件内第一个表.row_values(i) for i in range(1,文件内第一个表.nrows)] project_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) sys.path.append(project_path) os.environ[&#x27;DJANGO_SETTINGS_MODULE&#x27;] = &#x27;shuai.settings&#x27; django.setup() from APP名称.models import 模型类名 list = [] for i in 横向资料: list.append(模型类名(字段1 = i[0],字段2 = i[1],字段3 = i[2],字段4 = i[3])) 模型类名.objects.bulk_create(list) 返回文件绝对路径123456789101112import os,sysdef 返回文件绝对路径(当前路径文件名): if hasattr(sys, &#x27;_MEIPASS&#x27;): # PyInstaller会创建临时文件夹temp # 并把路径存储在_MEIPASS中 base_path = sys._MEIPASS else: base_path = os.path.abspath(&#x27;.&#x27;) return os.path.join(base_path, 当前路径文件名)#print(返回文件绝对路径(&#x27;list1.py&#x27;)) 返回当前路径第一个包含名字的文件12345678910import osdef 返回当前路径第一个包含名字的文件(名字): namelist = os.listdir(os.getcwd()) for x in namelist: if 名字 in x and &#x27;$&#x27; not in x: 路径 = x return 路径 break#print(返回当前路径第一个包含名字的文件(&#x27;lis&#x27;)) xlrd打开excel文件12345678910111213141516171819202122232425262728293031import xlrdclass 打开excel文件(): def __init__(self,文件名,第几个表): self.文件 = xlrd.open_workbook(filename = 文件名) self.表 = self.文件.sheet_by_index(第几个表-1) def 获得横向资料(self): self.数据 = [self.表.row_values(i) for i in range(self.表.nrows)] return self.数据 def 获得纵向资料(self): self.数据 = [self.表.col_values(i) for i in range(self.表.ncols)] return self.数据 def 获得名称列数据(self,名称): def 获得列序号(表名,查找字段名): 列序号 = None for i in range(表名.ncols): if (表名.cell_value(0,i) == 查找字段名): 列序号 = i break return 列序号 print(获得列序号(self.表,名称)) self.数据 = self.表.col_values(获得列序号(self.表,名称),1) return self.数据# 文件 = 打开excel文件(&#x27;测试.xlsx&#x27;,1)# print(文件.获得名称列数据(&#x27;地址&#x27;)) 列表取第一个电话1234567891011121314import redef 列表取第一个电话(list1): list2 = [] for i in list1: for j in i: if re.match(r&quot;^1\\d&#123;10&#125;$&quot;, j): list2.append(j) break else: list2.append(&#x27;mei&#x27;) return list2#list1 = [[&#x27;123&#x27;,&#x27;13210000000&#x27;,&#x27;13210000000&#x27;],[&#x27;159&#x27;,&#x27;15988886666&#x27;],[&#x27;123&#x27;]]#print(列表取第一个电话(list1)) 求列表元素出现次数字典12345def 求列表元素出现次数字典(list): 结果 = &#123;&#125; for i in set(list): 结果[i] = list.count(i) return 结果 openpyxl写新文件12345678910111213141516171819202122232425262728import openpyxlfrom openpyxl.styles import Alignment, Fontdef openpyxl写新文件(): 填充的数据列表 = [] 结果文件 = openpyxl.Workbook() 表1 = 结果文件.active 表1.title = &#x27;表1&#x27; 表1.merge_cells(start_row=1, start_column=1, end_row=1, end_column=6) 表1.cell(1, 1).value = &#x27;这里我就写个字&#x27; 标题 = 表1[&#x27;A1&#x27;] 标题.font = Font(name = &#x27;黑体&#x27;,size = 20) 标题.alignment = Alignment(horizontal=&#x27;center&#x27;, vertical=&#x27;center&#x27;) 表1.column_dimensions[&#x27;B&#x27;].width = 33 表1.column_dimensions[&#x27;C&#x27;].width = 11 for i in 填充的数据列表: 表1.append(i) 表2 = 结果文件.create_sheet(&#x27;表2&#x27;) 表2.append(&#x27;数据&#x27;) 结果文件.save(&#x27;结果文件.xlsx&#x27;)","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"邮件","slug":"邮件","permalink":"https://zhongkangjk.github.io/tags/%E9%82%AE%E4%BB%B6/"},{"name":"win32","slug":"win32","permalink":"https://zhongkangjk.github.io/tags/win32/"},{"name":"tkinter","slug":"tkinter","permalink":"https://zhongkangjk.github.io/tags/tkinter/"},{"name":"selenium","slug":"selenium","permalink":"https://zhongkangjk.github.io/tags/selenium/"},{"name":"爬虫","slug":"爬虫","permalink":"https://zhongkangjk.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"},{"name":"excel","slug":"excel","permalink":"https://zhongkangjk.github.io/tags/excel/"}]},{"title":"记录一些神奇的前端代码","slug":"记录一些神奇的前端代码","date":"2021-07-25T14:57:54.000Z","updated":"2022-03-23T06:28:02.932Z","comments":true,"path":"2021/07/25/记录一些神奇的前端代码/","link":"","permalink":"https://zhongkangjk.github.io/2021/07/25/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E7%A5%9E%E5%A5%87%E7%9A%84%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81/","excerpt":"虽然我看不懂，但是要记下来","text":"虽然我看不懂，但是要记下来 CSS一个彩色的背景1background: radial-gradient(200% 100% at top center, #f7f7b6, #e96f92, #75517d, #1b2947);","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"前端","slug":"计算机/前端","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://zhongkangjk.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"自己常用的Linux系统操作命令","slug":"自己常用的Linux系统操作命令","date":"2021-07-25T14:30:54.000Z","updated":"2022-03-23T06:33:44.078Z","comments":true,"path":"2021/07/25/自己常用的Linux系统操作命令/","link":"","permalink":"https://zhongkangjk.github.io/2021/07/25/%E8%87%AA%E5%B7%B1%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/","excerpt":"记录一下，方便使用","text":"记录一下，方便使用 开关uwsgi-django网站关闭uwsgi服务12345678ps ax | grep uwsgi得到类似15005 pts/4 S 0:00 /ve/path/bin/uwsgi --ini config.ini15006 pts/4 S 0:00 /ve/path/bin/uwsgi --ini config.ini15007 pts/4 S 0:00 /ve/path/bin/uwsgi --ini config.ini地址是/ve/path/bin/uwsgi杀死killall -s INT /ve/path/bin/uwsgi 到对应目录开启虚拟环境1cd /www/wwwroot/shuai4-django-env&amp;&amp;source bin/activate 用配置文件启动1uwsgi -d --ini shuai4-django.ini 更新以后的开启重载关闭uwsgi方式123456#开启/www/wwwroot/shuai4-django-env3.7/bin/uwsgi -d --ini /www/wwwroot/shuai4-django-env3.7/shuai4-django.ini --log-reopen#重载/www/wwwroot/shuai4-django-env3.7/bin/uwsgi --reload /www/wwwroot/shuai4-django-env3.7/uwsgi.pid#关闭/www/wwwroot/shuai4-django-env3.7/bin/uwsgi --stop /www/wwwroot/shuai4-django-env3.7/uwsgi.pid 部署uwsgi-django网站时用到的导出导入包1234#导出pip freeze &gt; requirements.txt#导入pip install -r requirements.txt debian安装pip1sudo apt-get install python3-pip 安装虚拟环境包1pip3 install virtualenv 创建文件夹1mkdir /var/www 移动到该文件夹1cd /var/www 创建虚拟环境1virtualenv studyapi 进入虚拟环境1source studyapi/bin/activate 安装7z1apt install p7zip-full 解压项目到当前文件夹17z x dwebsite.zip 解压项目到当前文件夹17z x dwebsite.zip uwsgi配置文件12345678910[uwsgi]chdir =/www/wwwroot/shuai4-django-env/shuai4-djangomodule =shuai4.wsgihome =/www/wwwroot/shuai4-django-env/master =trueprocesses =4socket =127.0.0.1:9090chmod-socket = 666vacuum = truepidfile=uwsgi.pid nginx配置文件12345678910111213141516server&#123; listen 8097; server_name 49.232.5.6; location /static &#123; alias /www/wwwroot/shuai4-django-env/shuai4-django/collected_static; &#125; location / &#123; uwsgi_pass 127.0.0.1:9090; include /www/server/panel/vhost/nginx/uwsgi_params; client_max_body_size 20m; &#125; access_log /www/wwwlogs/49.232.5.6.log; error_log /www/wwwlogs/49.232.5.6.error.log;&#125;","categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"linux","slug":"计算机/linux","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://zhongkangjk.github.io/tags/linux/"},{"name":"uwsgi","slug":"uwsgi","permalink":"https://zhongkangjk.github.io/tags/uwsgi/"},{"name":"django部署","slug":"django部署","permalink":"https://zhongkangjk.github.io/tags/django%E9%83%A8%E7%BD%B2/"},{"name":"nginx","slug":"nginx","permalink":"https://zhongkangjk.github.io/tags/nginx/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-07-21T12:44:04.767Z","updated":"2021-07-24T13:50:20.811Z","comments":true,"path":"2021/07/21/hello-world/","link":"","permalink":"https://zhongkangjk.github.io/2021/07/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"计算机","slug":"计算机","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"python","slug":"计算机/python","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/python/"},{"name":"前端","slug":"计算机/前端","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E5%89%8D%E7%AB%AF/"},{"name":"游戏","slug":"游戏","permalink":"https://zhongkangjk.github.io/categories/%E6%B8%B8%E6%88%8F/"},{"name":"神武","slug":"游戏/神武","permalink":"https://zhongkangjk.github.io/categories/%E6%B8%B8%E6%88%8F/%E7%A5%9E%E6%AD%A6/"},{"name":"linux","slug":"计算机/linux","permalink":"https://zhongkangjk.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/linux/"},{"name":"随笔","slug":"随笔","permalink":"https://zhongkangjk.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"django","slug":"django","permalink":"https://zhongkangjk.github.io/tags/django/"},{"name":"uniapp","slug":"uniapp","permalink":"https://zhongkangjk.github.io/tags/uniapp/"},{"name":"python","slug":"python","permalink":"https://zhongkangjk.github.io/tags/python/"},{"name":"pdf","slug":"pdf","permalink":"https://zhongkangjk.github.io/tags/pdf/"},{"name":"爬虫","slug":"爬虫","permalink":"https://zhongkangjk.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"前端","slug":"前端","permalink":"https://zhongkangjk.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"神武","slug":"神武","permalink":"https://zhongkangjk.github.io/tags/%E7%A5%9E%E6%AD%A6/"},{"name":"linux","slug":"linux","permalink":"https://zhongkangjk.github.io/tags/linux/"},{"name":"随笔","slug":"随笔","permalink":"https://zhongkangjk.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"pandas","slug":"pandas","permalink":"https://zhongkangjk.github.io/tags/pandas/"},{"name":"httpx","slug":"httpx","permalink":"https://zhongkangjk.github.io/tags/httpx/"},{"name":"datetime","slug":"datetime","permalink":"https://zhongkangjk.github.io/tags/datetime/"},{"name":"webDAV","slug":"webDAV","permalink":"https://zhongkangjk.github.io/tags/webDAV/"},{"name":"word","slug":"word","permalink":"https://zhongkangjk.github.io/tags/word/"},{"name":"邮件","slug":"邮件","permalink":"https://zhongkangjk.github.io/tags/%E9%82%AE%E4%BB%B6/"},{"name":"win32","slug":"win32","permalink":"https://zhongkangjk.github.io/tags/win32/"},{"name":"tkinter","slug":"tkinter","permalink":"https://zhongkangjk.github.io/tags/tkinter/"},{"name":"selenium","slug":"selenium","permalink":"https://zhongkangjk.github.io/tags/selenium/"},{"name":"excel","slug":"excel","permalink":"https://zhongkangjk.github.io/tags/excel/"},{"name":"uwsgi","slug":"uwsgi","permalink":"https://zhongkangjk.github.io/tags/uwsgi/"},{"name":"django部署","slug":"django部署","permalink":"https://zhongkangjk.github.io/tags/django%E9%83%A8%E7%BD%B2/"},{"name":"nginx","slug":"nginx","permalink":"https://zhongkangjk.github.io/tags/nginx/"}]}